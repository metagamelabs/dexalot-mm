/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace ITradePairs {
  export type OrderStruct = {
    id: BytesLike;
    price: BigNumberish;
    totalAmount: BigNumberish;
    quantity: BigNumberish;
    quantityFilled: BigNumberish;
    totalFee: BigNumberish;
    traderaddress: string;
    side: BigNumberish;
    type1: BigNumberish;
    status: BigNumberish;
  };

  export type OrderStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    number,
    number,
    number
  ] & {
    id: string;
    price: BigNumber;
    totalAmount: BigNumber;
    quantity: BigNumber;
    quantityFilled: BigNumber;
    totalFee: BigNumber;
    traderaddress: string;
    side: number;
    type1: number;
    status: number;
  };
}

export interface PortfolioInterface extends utils.Interface {
  contractName: "Portfolio";
  functions: {
    "AUCTION_ADMIN_ROLE()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "TENK()": FunctionFragment;
    "VERSION()": FunctionFragment;
    "addAdmin(address)": FunctionFragment;
    "addAuctionAdmin(address)": FunctionFragment;
    "addExecution((bytes32,uint256,uint256,uint256,uint256,uint256,address,uint8,uint8,uint8),address,bytes32,bytes32,uint256,uint256,uint256,uint256)": FunctionFragment;
    "addToken(bytes32,address,uint8)": FunctionFragment;
    "addTrustedContract(address,string)": FunctionFragment;
    "adjustAvailable(uint8,address,bytes32,uint256)": FunctionFragment;
    "assets(address,bytes32)": FunctionFragment;
    "depositFeeRate()": FunctionFragment;
    "depositToken(address,bytes32,uint256)": FunctionFragment;
    "depositTokenFromContract(address,bytes32,uint256)": FunctionFragment;
    "feeAddress()": FunctionFragment;
    "getBalance(address,bytes32)": FunctionFragment;
    "getDepositFeeRate()": FunctionFragment;
    "getFeeAddress()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "getToken(bytes32)": FunctionFragment;
    "getTokenList()": FunctionFragment;
    "getWithdrawFeeRate()": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize()": FunctionFragment;
    "isAdmin(address)": FunctionFragment;
    "isAuctionAdmin(address)": FunctionFragment;
    "native()": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "pauseDeposit(bool)": FunctionFragment;
    "paused()": FunctionFragment;
    "removeAdmin(address)": FunctionFragment;
    "removeAuctionAdmin(address)": FunctionFragment;
    "removeTrustedContract(address)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setAuctionMode(bytes32,uint8)": FunctionFragment;
    "setFeeAddress(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "trustedContractToIntegrator(address)": FunctionFragment;
    "trustedContracts(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateTransferFeeRate(uint256,uint8)": FunctionFragment;
    "withdrawFeeRate()": FunctionFragment;
    "withdrawNative(address,uint256)": FunctionFragment;
    "withdrawToken(address,bytes32,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "AUCTION_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "TENK", values?: undefined): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(functionFragment: "addAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "addAuctionAdmin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addExecution",
    values: [
      ITradePairs.OrderStruct,
      string,
      BytesLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addToken",
    values: [BytesLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addTrustedContract",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "adjustAvailable",
    values: [BigNumberish, string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "assets",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "depositFeeRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositToken",
    values: [string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositTokenFromContract",
    values: [string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feeAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositFeeRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getToken", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getTokenList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWithdrawFeeRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isAuctionAdmin",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "native", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pauseDeposit",
    values: [boolean]
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "removeAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "removeAuctionAdmin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeTrustedContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuctionMode",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "trustedContractToIntegrator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "trustedContracts",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateTransferFeeRate",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFeeRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawNative",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [string, BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "AUCTION_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "TENK", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addAuctionAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addExecution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addTrustedContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adjustAvailable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "assets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositTokenFromContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDepositFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTokenList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWithdrawFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAuctionAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "native", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauseDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAuctionAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeTrustedContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAuctionMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustedContractToIntegrator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustedContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateTransferFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;

  events: {
    "ContractTrustStatusChanged(address,string,bool)": EventFragment;
    "FeeAddressSet(address,address)": EventFragment;
    "ParameterUpdated(bytes32,string,uint256,uint256)": EventFragment;
    "Paused(address)": EventFragment;
    "PortfolioUpdated(uint8,address,bytes32,uint256,uint256,uint256,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ContractTrustStatusChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeAddressSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParameterUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PortfolioUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export type ContractTrustStatusChangedEvent = TypedEvent<
  [string, string, boolean],
  { _contract: string; _organization: string; _status: boolean }
>;

export type ContractTrustStatusChangedEventFilter =
  TypedEventFilter<ContractTrustStatusChangedEvent>;

export type FeeAddressSetEvent = TypedEvent<
  [string, string],
  { _oldFee: string; _newFee: string }
>;

export type FeeAddressSetEventFilter = TypedEventFilter<FeeAddressSetEvent>;

export type ParameterUpdatedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  { pair: string; _param: string; _oldValue: BigNumber; _newValue: BigNumber }
>;

export type ParameterUpdatedEventFilter =
  TypedEventFilter<ParameterUpdatedEvent>;

export type PausedEvent = TypedEvent<[string], { account: string }>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type PortfolioUpdatedEvent = TypedEvent<
  [number, string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    transaction: number;
    wallet: string;
    symbol: string;
    quantity: BigNumber;
    feeCharged: BigNumber;
    total: BigNumber;
    available: BigNumber;
  }
>;

export type PortfolioUpdatedEventFilter =
  TypedEventFilter<PortfolioUpdatedEvent>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  { role: string; previousAdminRole: string; newAdminRole: string }
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export type UnpausedEvent = TypedEvent<[string], { account: string }>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface Portfolio extends BaseContract {
  contractName: "Portfolio";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PortfolioInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    AUCTION_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    TENK(overrides?: CallOverrides): Promise<[BigNumber]>;

    VERSION(overrides?: CallOverrides): Promise<[string]>;

    addAdmin(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addAuctionAdmin(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addExecution(
      _maker: ITradePairs.OrderStruct,
      _takerAddr: string,
      _baseSymbol: BytesLike,
      _quoteSymbol: BytesLike,
      _baseAmount: BigNumberish,
      _quoteAmount: BigNumberish,
      _makerfeeCharged: BigNumberish,
      _takerfeeCharged: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addToken(
      _symbol: BytesLike,
      _token: string,
      _mode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addTrustedContract(
      _contract: string,
      _organization: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    adjustAvailable(
      _transaction: BigNumberish,
      _trader: string,
      _symbol: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    assets(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { total: BigNumber; available: BigNumber }
    >;

    depositFeeRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    depositToken(
      _from: string,
      _symbol: BytesLike,
      _quantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositTokenFromContract(
      _from: string,
      _symbol: BytesLike,
      _quantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feeAddress(overrides?: CallOverrides): Promise<[string]>;

    getBalance(
      _owner: string,
      _symbol: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number] & {
        total: BigNumber;
        available: BigNumber;
        assetType: number;
      }
    >;

    getDepositFeeRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    getFeeAddress(overrides?: CallOverrides): Promise<[string]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getToken(_symbol: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getTokenList(overrides?: CallOverrides): Promise<[string[]]>;

    getWithdrawFeeRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isAdmin(_address: string, overrides?: CallOverrides): Promise<[boolean]>;

    isAuctionAdmin(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    native(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pauseDeposit(
      _paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    removeAdmin(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeAuctionAdmin(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeTrustedContract(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAuctionMode(
      _symbol: BytesLike,
      _mode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeAddress(
      _feeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    trustedContractToIntegrator(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    trustedContracts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateTransferFeeRate(
      _rate: BigNumberish,
      _rateType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawFeeRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawNative(
      _to: string,
      _quantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawToken(
      _to: string,
      _symbol: BytesLike,
      _quantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  AUCTION_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  TENK(overrides?: CallOverrides): Promise<BigNumber>;

  VERSION(overrides?: CallOverrides): Promise<string>;

  addAdmin(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addAuctionAdmin(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addExecution(
    _maker: ITradePairs.OrderStruct,
    _takerAddr: string,
    _baseSymbol: BytesLike,
    _quoteSymbol: BytesLike,
    _baseAmount: BigNumberish,
    _quoteAmount: BigNumberish,
    _makerfeeCharged: BigNumberish,
    _takerfeeCharged: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addToken(
    _symbol: BytesLike,
    _token: string,
    _mode: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addTrustedContract(
    _contract: string,
    _organization: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  adjustAvailable(
    _transaction: BigNumberish,
    _trader: string,
    _symbol: BytesLike,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  assets(
    arg0: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { total: BigNumber; available: BigNumber }
  >;

  depositFeeRate(overrides?: CallOverrides): Promise<BigNumber>;

  depositToken(
    _from: string,
    _symbol: BytesLike,
    _quantity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositTokenFromContract(
    _from: string,
    _symbol: BytesLike,
    _quantity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feeAddress(overrides?: CallOverrides): Promise<string>;

  getBalance(
    _owner: string,
    _symbol: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, number] & {
      total: BigNumber;
      available: BigNumber;
      assetType: number;
    }
  >;

  getDepositFeeRate(overrides?: CallOverrides): Promise<BigNumber>;

  getFeeAddress(overrides?: CallOverrides): Promise<string>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getRoleMember(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getToken(_symbol: BytesLike, overrides?: CallOverrides): Promise<string>;

  getTokenList(overrides?: CallOverrides): Promise<string[]>;

  getWithdrawFeeRate(overrides?: CallOverrides): Promise<BigNumber>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isAdmin(_address: string, overrides?: CallOverrides): Promise<boolean>;

  isAuctionAdmin(_address: string, overrides?: CallOverrides): Promise<boolean>;

  native(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pauseDeposit(
    _paused: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  removeAdmin(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeAuctionAdmin(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeTrustedContract(
    _contract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAuctionMode(
    _symbol: BytesLike,
    _mode: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeAddress(
    _feeAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  trustedContractToIntegrator(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  trustedContracts(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateTransferFeeRate(
    _rate: BigNumberish,
    _rateType: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawFeeRate(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawNative(
    _to: string,
    _quantity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawToken(
    _to: string,
    _symbol: BytesLike,
    _quantity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    AUCTION_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    TENK(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION(overrides?: CallOverrides): Promise<string>;

    addAdmin(_address: string, overrides?: CallOverrides): Promise<void>;

    addAuctionAdmin(_address: string, overrides?: CallOverrides): Promise<void>;

    addExecution(
      _maker: ITradePairs.OrderStruct,
      _takerAddr: string,
      _baseSymbol: BytesLike,
      _quoteSymbol: BytesLike,
      _baseAmount: BigNumberish,
      _quoteAmount: BigNumberish,
      _makerfeeCharged: BigNumberish,
      _takerfeeCharged: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addToken(
      _symbol: BytesLike,
      _token: string,
      _mode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addTrustedContract(
      _contract: string,
      _organization: string,
      overrides?: CallOverrides
    ): Promise<void>;

    adjustAvailable(
      _transaction: BigNumberish,
      _trader: string,
      _symbol: BytesLike,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    assets(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { total: BigNumber; available: BigNumber }
    >;

    depositFeeRate(overrides?: CallOverrides): Promise<BigNumber>;

    depositToken(
      _from: string,
      _symbol: BytesLike,
      _quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositTokenFromContract(
      _from: string,
      _symbol: BytesLike,
      _quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    feeAddress(overrides?: CallOverrides): Promise<string>;

    getBalance(
      _owner: string,
      _symbol: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number] & {
        total: BigNumber;
        available: BigNumber;
        assetType: number;
      }
    >;

    getDepositFeeRate(overrides?: CallOverrides): Promise<BigNumber>;

    getFeeAddress(overrides?: CallOverrides): Promise<string>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getToken(_symbol: BytesLike, overrides?: CallOverrides): Promise<string>;

    getTokenList(overrides?: CallOverrides): Promise<string[]>;

    getWithdrawFeeRate(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(overrides?: CallOverrides): Promise<void>;

    isAdmin(_address: string, overrides?: CallOverrides): Promise<boolean>;

    isAuctionAdmin(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    native(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    pauseDeposit(_paused: boolean, overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    removeAdmin(_address: string, overrides?: CallOverrides): Promise<void>;

    removeAuctionAdmin(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeTrustedContract(
      _contract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setAuctionMode(
      _symbol: BytesLike,
      _mode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeAddress(
      _feeAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    trustedContractToIntegrator(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    trustedContracts(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updateTransferFeeRate(
      _rate: BigNumberish,
      _rateType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFeeRate(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawNative(
      _to: string,
      _quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawToken(
      _to: string,
      _symbol: BytesLike,
      _quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ContractTrustStatusChanged(address,string,bool)"(
      _contract?: string | null,
      _organization?: string | null,
      _status?: null
    ): ContractTrustStatusChangedEventFilter;
    ContractTrustStatusChanged(
      _contract?: string | null,
      _organization?: string | null,
      _status?: null
    ): ContractTrustStatusChangedEventFilter;

    "FeeAddressSet(address,address)"(
      _oldFee?: null,
      _newFee?: null
    ): FeeAddressSetEventFilter;
    FeeAddressSet(_oldFee?: null, _newFee?: null): FeeAddressSetEventFilter;

    "ParameterUpdated(bytes32,string,uint256,uint256)"(
      pair?: BytesLike | null,
      _param?: null,
      _oldValue?: null,
      _newValue?: null
    ): ParameterUpdatedEventFilter;
    ParameterUpdated(
      pair?: BytesLike | null,
      _param?: null,
      _oldValue?: null,
      _newValue?: null
    ): ParameterUpdatedEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "PortfolioUpdated(uint8,address,bytes32,uint256,uint256,uint256,uint256)"(
      transaction?: BigNumberish | null,
      wallet?: string | null,
      symbol?: BytesLike | null,
      quantity?: null,
      feeCharged?: null,
      total?: null,
      available?: null
    ): PortfolioUpdatedEventFilter;
    PortfolioUpdated(
      transaction?: BigNumberish | null,
      wallet?: string | null,
      symbol?: BytesLike | null,
      quantity?: null,
      feeCharged?: null,
      total?: null,
      available?: null
    ): PortfolioUpdatedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    AUCTION_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    TENK(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    addAdmin(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addAuctionAdmin(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addExecution(
      _maker: ITradePairs.OrderStruct,
      _takerAddr: string,
      _baseSymbol: BytesLike,
      _quoteSymbol: BytesLike,
      _baseAmount: BigNumberish,
      _quoteAmount: BigNumberish,
      _makerfeeCharged: BigNumberish,
      _takerfeeCharged: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addToken(
      _symbol: BytesLike,
      _token: string,
      _mode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addTrustedContract(
      _contract: string,
      _organization: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    adjustAvailable(
      _transaction: BigNumberish,
      _trader: string,
      _symbol: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    assets(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositFeeRate(overrides?: CallOverrides): Promise<BigNumber>;

    depositToken(
      _from: string,
      _symbol: BytesLike,
      _quantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositTokenFromContract(
      _from: string,
      _symbol: BytesLike,
      _quantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feeAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getBalance(
      _owner: string,
      _symbol: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDepositFeeRate(overrides?: CallOverrides): Promise<BigNumber>;

    getFeeAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getToken(_symbol: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    getTokenList(overrides?: CallOverrides): Promise<BigNumber>;

    getWithdrawFeeRate(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isAdmin(_address: string, overrides?: CallOverrides): Promise<BigNumber>;

    isAuctionAdmin(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    native(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pauseDeposit(
      _paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    removeAdmin(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeAuctionAdmin(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeTrustedContract(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAuctionMode(
      _symbol: BytesLike,
      _mode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeAddress(
      _feeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    trustedContractToIntegrator(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    trustedContracts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateTransferFeeRate(
      _rate: BigNumberish,
      _rateType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawFeeRate(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawNative(
      _to: string,
      _quantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawToken(
      _to: string,
      _symbol: BytesLike,
      _quantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    AUCTION_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TENK(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addAdmin(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addAuctionAdmin(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addExecution(
      _maker: ITradePairs.OrderStruct,
      _takerAddr: string,
      _baseSymbol: BytesLike,
      _quoteSymbol: BytesLike,
      _baseAmount: BigNumberish,
      _quoteAmount: BigNumberish,
      _makerfeeCharged: BigNumberish,
      _takerfeeCharged: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addToken(
      _symbol: BytesLike,
      _token: string,
      _mode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addTrustedContract(
      _contract: string,
      _organization: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    adjustAvailable(
      _transaction: BigNumberish,
      _trader: string,
      _symbol: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    assets(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositFeeRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositToken(
      _from: string,
      _symbol: BytesLike,
      _quantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositTokenFromContract(
      _from: string,
      _symbol: BytesLike,
      _quantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feeAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBalance(
      _owner: string,
      _symbol: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDepositFeeRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFeeAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getToken(
      _symbol: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenList(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getWithdrawFeeRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isAdmin(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAuctionAdmin(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    native(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pauseDeposit(
      _paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeAdmin(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeAuctionAdmin(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeTrustedContract(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAuctionMode(
      _symbol: BytesLike,
      _mode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeAddress(
      _feeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    trustedContractToIntegrator(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    trustedContracts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateTransferFeeRate(
      _rate: BigNumberish,
      _rateType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFeeRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawNative(
      _to: string,
      _quantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawToken(
      _to: string,
      _symbol: BytesLike,
      _quantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
