/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ExchangeInterface extends utils.Interface {
  contractName: "Exchange";
  functions: {
    "AUCTION_ADMIN_ROLE()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "VERSION()": FunctionFragment;
    "addAdmin(address)": FunctionFragment;
    "addAuctionAdmin(address)": FunctionFragment;
    "addOrderType(bytes32,uint8)": FunctionFragment;
    "addToken(bytes32,address,uint8)": FunctionFragment;
    "addTradePair(bytes32,address,uint8,address,uint8,uint256,uint256,uint8)": FunctionFragment;
    "bytes32ToString(bytes32)": FunctionFragment;
    "flipCoin()": FunctionFragment;
    "getAllowedSlippagePercent(bytes32)": FunctionFragment;
    "getAuctionData(bytes32)": FunctionFragment;
    "getDecimals(bytes32,bool)": FunctionFragment;
    "getDisplayDecimals(bytes32,bool)": FunctionFragment;
    "getMakerRate(bytes32)": FunctionFragment;
    "getMaxTradeAmount(bytes32)": FunctionFragment;
    "getMinTradeAmount(bytes32)": FunctionFragment;
    "getPortfolio()": FunctionFragment;
    "getPriceFeed()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "getSymbol(bytes32,bool)": FunctionFragment;
    "getTakerRate(bytes32)": FunctionFragment;
    "getTradePairs()": FunctionFragment;
    "getTradePairsAddr()": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize()": FunctionFragment;
    "isAdmin(address)": FunctionFragment;
    "isAuctionAdmin(address)": FunctionFragment;
    "isHead()": FunctionFragment;
    "matchAuctionOrders(bytes32,uint8)": FunctionFragment;
    "owner()": FunctionFragment;
    "pauseAddOrder(bytes32,bool)": FunctionFragment;
    "pauseDeposit(bool)": FunctionFragment;
    "pauseForUpgrade(bool)": FunctionFragment;
    "pausePortfolio(bool)": FunctionFragment;
    "pauseTradePair(bytes32,bool)": FunctionFragment;
    "pauseTrading(bool)": FunctionFragment;
    "removeAdmin(address)": FunctionFragment;
    "removeAuctionAdmin(address)": FunctionFragment;
    "removeOrderType(bytes32,uint8)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setAllowedSlippagePercent(bytes32,uint8)": FunctionFragment;
    "setAuctionMode(bytes32,uint8)": FunctionFragment;
    "setAuctionPrice(bytes32,uint256,uint256)": FunctionFragment;
    "setDisplayDecimals(bytes32,uint8,bool)": FunctionFragment;
    "setMaxTradeAmount(bytes32,uint256)": FunctionFragment;
    "setMinTradeAmount(bytes32,uint256)": FunctionFragment;
    "setPortfolio(address)": FunctionFragment;
    "setPriceFeed(address)": FunctionFragment;
    "setTradePairs(address)": FunctionFragment;
    "stringToBytes32(string)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "updateAllRates(uint256,uint256)": FunctionFragment;
    "updateRate(bytes32,uint256,uint8)": FunctionFragment;
    "updateRates(bytes32,uint256,uint256)": FunctionFragment;
    "updateTransferFeeRate(uint256,uint8)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "AUCTION_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(functionFragment: "addAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "addAuctionAdmin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addOrderType",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addToken",
    values: [BytesLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addTradePair",
    values: [
      BytesLike,
      string,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "bytes32ToString",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "flipCoin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAllowedSlippagePercent",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionData",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDecimals",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getDisplayDecimals",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getMakerRate",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxTradeAmount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinTradeAmount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPortfolio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceFeed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSymbol",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getTakerRate",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTradePairs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTradePairsAddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isAuctionAdmin",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isHead", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "matchAuctionOrders",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pauseAddOrder",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "pauseDeposit",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "pauseForUpgrade",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "pausePortfolio",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "pauseTradePair",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "pauseTrading",
    values: [boolean]
  ): string;
  encodeFunctionData(functionFragment: "removeAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "removeAuctionAdmin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeOrderType",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowedSlippagePercent",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuctionMode",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuctionPrice",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDisplayDecimals",
    values: [BytesLike, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxTradeAmount",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinTradeAmount",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPortfolio",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceFeed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTradePairs",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stringToBytes32",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAllRates",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRate",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRates",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTransferFeeRate",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "AUCTION_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addAuctionAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addOrderType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addTradePair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bytes32ToString",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "flipCoin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllowedSlippagePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDisplayDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMakerRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxTradeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinTradeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPortfolio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSymbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTakerRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTradePairs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTradePairsAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAuctionAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isHead", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "matchAuctionOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauseAddOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pauseDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pauseForUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pausePortfolio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pauseTradePair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pauseTrading",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAuctionAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeOrderType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAllowedSlippagePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuctionMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuctionPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDisplayDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxTradeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinTradeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPortfolio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTradePairs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stringToBytes32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAllRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTransferFeeRate",
    data: BytesLike
  ): Result;

  events: {
    "CoinFlipped(uint80,int256,bool)": EventFragment;
    "PortfolioSet(address,address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "TradePairsSet(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CoinFlipped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PortfolioSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TradePairsSet"): EventFragment;
}

export type CoinFlippedEvent = TypedEvent<
  [BigNumber, BigNumber, boolean],
  { roundid: BigNumber; price: BigNumber; outcome: boolean }
>;

export type CoinFlippedEventFilter = TypedEventFilter<CoinFlippedEvent>;

export type PortfolioSetEvent = TypedEvent<
  [string, string],
  { _oldPortfolio: string; _newPortfolio: string }
>;

export type PortfolioSetEventFilter = TypedEventFilter<PortfolioSetEvent>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  { role: string; previousAdminRole: string; newAdminRole: string }
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export type TradePairsSetEvent = TypedEvent<
  [string, string],
  { _oldTradePairs: string; _newTradePairs: string }
>;

export type TradePairsSetEventFilter = TypedEventFilter<TradePairsSetEvent>;

export interface Exchange extends BaseContract {
  contractName: "Exchange";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ExchangeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    AUCTION_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    VERSION(overrides?: CallOverrides): Promise<[string]>;

    addAdmin(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addAuctionAdmin(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addOrderType(
      _tradePairId: BytesLike,
      _type: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addToken(
      _symbol: BytesLike,
      _token: string,
      _mode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addTradePair(
      _tradePairId: BytesLike,
      _baseAssetAddr: string,
      _baseDisplayDecimals: BigNumberish,
      _quoteAssetAddr: string,
      _quoteDisplayDecimals: BigNumberish,
      _minTradeAmount: BigNumberish,
      _maxTradeAmount: BigNumberish,
      _mode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bytes32ToString(
      _bytes32: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    flipCoin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAllowedSlippagePercent(
      _tradePairId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getAuctionData(
      _tradePairId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber, BigNumber, BigNumber] & {
        mode: number;
        price: BigNumber;
        percent: BigNumber;
        lower: BigNumber;
        upper: BigNumber;
      }
    >;

    getDecimals(
      _tradePairId: BytesLike,
      _isBase: boolean,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getDisplayDecimals(
      _tradePairId: BytesLike,
      _isBase: boolean,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getMakerRate(
      _tradePairId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMaxTradeAmount(
      _tradePairId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMinTradeAmount(
      _tradePairId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPortfolio(overrides?: CallOverrides): Promise<[string]>;

    getPriceFeed(overrides?: CallOverrides): Promise<[string]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSymbol(
      _tradePairId: BytesLike,
      _isBase: boolean,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getTakerRate(
      _tradePairId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTradePairs(overrides?: CallOverrides): Promise<[string[]]>;

    getTradePairsAddr(overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isAdmin(_address: string, overrides?: CallOverrides): Promise<[boolean]>;

    isAuctionAdmin(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isHead(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, boolean] & {
        r: BigNumber;
        p: BigNumber;
        o: boolean;
      }
    >;

    matchAuctionOrders(
      _tradePairId: BytesLike,
      maxCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pauseAddOrder(
      _tradePairId: BytesLike,
      _addOrderPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pauseDeposit(
      _paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pauseForUpgrade(
      _paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pausePortfolio(
      _paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pauseTradePair(
      _tradePairId: BytesLike,
      _tradePairPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pauseTrading(
      _tradingPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeAdmin(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeAuctionAdmin(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeOrderType(
      _tradePairId: BytesLike,
      _type: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAllowedSlippagePercent(
      _tradePairId: BytesLike,
      _allowedSlippagePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAuctionMode(
      _tradePairId: BytesLike,
      _mode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAuctionPrice(
      _tradePairId: BytesLike,
      _price: BigNumberish,
      _pct: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDisplayDecimals(
      _tradePairId: BytesLike,
      _displayDecimals: BigNumberish,
      _isBase: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxTradeAmount(
      _tradePairId: BytesLike,
      _maxTradeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinTradeAmount(
      _tradePairId: BytesLike,
      _minTradeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPortfolio(
      _portfolio: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPriceFeed(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTradePairs(
      _tradePairs: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stringToBytes32(
      _string: string,
      overrides?: CallOverrides
    ): Promise<[string] & { result: string }>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    updateAllRates(
      _makerRate: BigNumberish,
      _takerRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateRate(
      _tradePair: BytesLike,
      _rate: BigNumberish,
      _rateType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateRates(
      _tradePair: BytesLike,
      _makerRate: BigNumberish,
      _takerRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateTransferFeeRate(
      _rate: BigNumberish,
      _rateType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  AUCTION_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  VERSION(overrides?: CallOverrides): Promise<string>;

  addAdmin(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addAuctionAdmin(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addOrderType(
    _tradePairId: BytesLike,
    _type: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addToken(
    _symbol: BytesLike,
    _token: string,
    _mode: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addTradePair(
    _tradePairId: BytesLike,
    _baseAssetAddr: string,
    _baseDisplayDecimals: BigNumberish,
    _quoteAssetAddr: string,
    _quoteDisplayDecimals: BigNumberish,
    _minTradeAmount: BigNumberish,
    _maxTradeAmount: BigNumberish,
    _mode: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bytes32ToString(
    _bytes32: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  flipCoin(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAllowedSlippagePercent(
    _tradePairId: BytesLike,
    overrides?: CallOverrides
  ): Promise<number>;

  getAuctionData(
    _tradePairId: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, BigNumber, BigNumber, BigNumber] & {
      mode: number;
      price: BigNumber;
      percent: BigNumber;
      lower: BigNumber;
      upper: BigNumber;
    }
  >;

  getDecimals(
    _tradePairId: BytesLike,
    _isBase: boolean,
    overrides?: CallOverrides
  ): Promise<number>;

  getDisplayDecimals(
    _tradePairId: BytesLike,
    _isBase: boolean,
    overrides?: CallOverrides
  ): Promise<number>;

  getMakerRate(
    _tradePairId: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMaxTradeAmount(
    _tradePairId: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMinTradeAmount(
    _tradePairId: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPortfolio(overrides?: CallOverrides): Promise<string>;

  getPriceFeed(overrides?: CallOverrides): Promise<string>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getRoleMember(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSymbol(
    _tradePairId: BytesLike,
    _isBase: boolean,
    overrides?: CallOverrides
  ): Promise<string>;

  getTakerRate(
    _tradePairId: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTradePairs(overrides?: CallOverrides): Promise<string[]>;

  getTradePairsAddr(overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isAdmin(_address: string, overrides?: CallOverrides): Promise<boolean>;

  isAuctionAdmin(_address: string, overrides?: CallOverrides): Promise<boolean>;

  isHead(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, boolean] & { r: BigNumber; p: BigNumber; o: boolean }
  >;

  matchAuctionOrders(
    _tradePairId: BytesLike,
    maxCount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pauseAddOrder(
    _tradePairId: BytesLike,
    _addOrderPaused: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pauseDeposit(
    _paused: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pauseForUpgrade(
    _paused: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pausePortfolio(
    _paused: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pauseTradePair(
    _tradePairId: BytesLike,
    _tradePairPaused: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pauseTrading(
    _tradingPaused: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeAdmin(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeAuctionAdmin(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeOrderType(
    _tradePairId: BytesLike,
    _type: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAllowedSlippagePercent(
    _tradePairId: BytesLike,
    _allowedSlippagePercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAuctionMode(
    _tradePairId: BytesLike,
    _mode: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAuctionPrice(
    _tradePairId: BytesLike,
    _price: BigNumberish,
    _pct: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDisplayDecimals(
    _tradePairId: BytesLike,
    _displayDecimals: BigNumberish,
    _isBase: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxTradeAmount(
    _tradePairId: BytesLike,
    _maxTradeAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinTradeAmount(
    _tradePairId: BytesLike,
    _minTradeAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPortfolio(
    _portfolio: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPriceFeed(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTradePairs(
    _tradePairs: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stringToBytes32(_string: string, overrides?: CallOverrides): Promise<string>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  updateAllRates(
    _makerRate: BigNumberish,
    _takerRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateRate(
    _tradePair: BytesLike,
    _rate: BigNumberish,
    _rateType: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateRates(
    _tradePair: BytesLike,
    _makerRate: BigNumberish,
    _takerRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateTransferFeeRate(
    _rate: BigNumberish,
    _rateType: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    AUCTION_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    VERSION(overrides?: CallOverrides): Promise<string>;

    addAdmin(_address: string, overrides?: CallOverrides): Promise<void>;

    addAuctionAdmin(_address: string, overrides?: CallOverrides): Promise<void>;

    addOrderType(
      _tradePairId: BytesLike,
      _type: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addToken(
      _symbol: BytesLike,
      _token: string,
      _mode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addTradePair(
      _tradePairId: BytesLike,
      _baseAssetAddr: string,
      _baseDisplayDecimals: BigNumberish,
      _quoteAssetAddr: string,
      _quoteDisplayDecimals: BigNumberish,
      _minTradeAmount: BigNumberish,
      _maxTradeAmount: BigNumberish,
      _mode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    bytes32ToString(
      _bytes32: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    flipCoin(overrides?: CallOverrides): Promise<void>;

    getAllowedSlippagePercent(
      _tradePairId: BytesLike,
      overrides?: CallOverrides
    ): Promise<number>;

    getAuctionData(
      _tradePairId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber, BigNumber, BigNumber] & {
        mode: number;
        price: BigNumber;
        percent: BigNumber;
        lower: BigNumber;
        upper: BigNumber;
      }
    >;

    getDecimals(
      _tradePairId: BytesLike,
      _isBase: boolean,
      overrides?: CallOverrides
    ): Promise<number>;

    getDisplayDecimals(
      _tradePairId: BytesLike,
      _isBase: boolean,
      overrides?: CallOverrides
    ): Promise<number>;

    getMakerRate(
      _tradePairId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxTradeAmount(
      _tradePairId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinTradeAmount(
      _tradePairId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPortfolio(overrides?: CallOverrides): Promise<string>;

    getPriceFeed(overrides?: CallOverrides): Promise<string>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSymbol(
      _tradePairId: BytesLike,
      _isBase: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    getTakerRate(
      _tradePairId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTradePairs(overrides?: CallOverrides): Promise<string[]>;

    getTradePairsAddr(overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(overrides?: CallOverrides): Promise<void>;

    isAdmin(_address: string, overrides?: CallOverrides): Promise<boolean>;

    isAuctionAdmin(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isHead(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, boolean] & {
        r: BigNumber;
        p: BigNumber;
        o: boolean;
      }
    >;

    matchAuctionOrders(
      _tradePairId: BytesLike,
      maxCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pauseAddOrder(
      _tradePairId: BytesLike,
      _addOrderPaused: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    pauseDeposit(_paused: boolean, overrides?: CallOverrides): Promise<void>;

    pauseForUpgrade(_paused: boolean, overrides?: CallOverrides): Promise<void>;

    pausePortfolio(_paused: boolean, overrides?: CallOverrides): Promise<void>;

    pauseTradePair(
      _tradePairId: BytesLike,
      _tradePairPaused: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    pauseTrading(
      _tradingPaused: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    removeAdmin(_address: string, overrides?: CallOverrides): Promise<void>;

    removeAuctionAdmin(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeOrderType(
      _tradePairId: BytesLike,
      _type: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setAllowedSlippagePercent(
      _tradePairId: BytesLike,
      _allowedSlippagePercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setAuctionMode(
      _tradePairId: BytesLike,
      _mode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setAuctionPrice(
      _tradePairId: BytesLike,
      _price: BigNumberish,
      _pct: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDisplayDecimals(
      _tradePairId: BytesLike,
      _displayDecimals: BigNumberish,
      _isBase: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxTradeAmount(
      _tradePairId: BytesLike,
      _maxTradeAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinTradeAmount(
      _tradePairId: BytesLike,
      _minTradeAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPortfolio(_portfolio: string, overrides?: CallOverrides): Promise<void>;

    setPriceFeed(_address: string, overrides?: CallOverrides): Promise<void>;

    setTradePairs(
      _tradePairs: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stringToBytes32(
      _string: string,
      overrides?: CallOverrides
    ): Promise<string>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateAllRates(
      _makerRate: BigNumberish,
      _takerRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRate(
      _tradePair: BytesLike,
      _rate: BigNumberish,
      _rateType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRates(
      _tradePair: BytesLike,
      _makerRate: BigNumberish,
      _takerRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTransferFeeRate(
      _rate: BigNumberish,
      _rateType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CoinFlipped(uint80,int256,bool)"(
      roundid?: null,
      price?: null,
      outcome?: null
    ): CoinFlippedEventFilter;
    CoinFlipped(
      roundid?: null,
      price?: null,
      outcome?: null
    ): CoinFlippedEventFilter;

    "PortfolioSet(address,address)"(
      _oldPortfolio?: null,
      _newPortfolio?: null
    ): PortfolioSetEventFilter;
    PortfolioSet(
      _oldPortfolio?: null,
      _newPortfolio?: null
    ): PortfolioSetEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;

    "TradePairsSet(address,address)"(
      _oldTradePairs?: null,
      _newTradePairs?: null
    ): TradePairsSetEventFilter;
    TradePairsSet(
      _oldTradePairs?: null,
      _newTradePairs?: null
    ): TradePairsSetEventFilter;
  };

  estimateGas: {
    AUCTION_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    addAdmin(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addAuctionAdmin(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addOrderType(
      _tradePairId: BytesLike,
      _type: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addToken(
      _symbol: BytesLike,
      _token: string,
      _mode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addTradePair(
      _tradePairId: BytesLike,
      _baseAssetAddr: string,
      _baseDisplayDecimals: BigNumberish,
      _quoteAssetAddr: string,
      _quoteDisplayDecimals: BigNumberish,
      _minTradeAmount: BigNumberish,
      _maxTradeAmount: BigNumberish,
      _mode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bytes32ToString(
      _bytes32: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    flipCoin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAllowedSlippagePercent(
      _tradePairId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuctionData(
      _tradePairId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDecimals(
      _tradePairId: BytesLike,
      _isBase: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDisplayDecimals(
      _tradePairId: BytesLike,
      _isBase: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMakerRate(
      _tradePairId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxTradeAmount(
      _tradePairId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinTradeAmount(
      _tradePairId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPortfolio(overrides?: CallOverrides): Promise<BigNumber>;

    getPriceFeed(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSymbol(
      _tradePairId: BytesLike,
      _isBase: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTakerRate(
      _tradePairId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTradePairs(overrides?: CallOverrides): Promise<BigNumber>;

    getTradePairsAddr(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isAdmin(_address: string, overrides?: CallOverrides): Promise<BigNumber>;

    isAuctionAdmin(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isHead(overrides?: CallOverrides): Promise<BigNumber>;

    matchAuctionOrders(
      _tradePairId: BytesLike,
      maxCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pauseAddOrder(
      _tradePairId: BytesLike,
      _addOrderPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pauseDeposit(
      _paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pauseForUpgrade(
      _paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pausePortfolio(
      _paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pauseTradePair(
      _tradePairId: BytesLike,
      _tradePairPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pauseTrading(
      _tradingPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeAdmin(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeAuctionAdmin(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeOrderType(
      _tradePairId: BytesLike,
      _type: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAllowedSlippagePercent(
      _tradePairId: BytesLike,
      _allowedSlippagePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAuctionMode(
      _tradePairId: BytesLike,
      _mode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAuctionPrice(
      _tradePairId: BytesLike,
      _price: BigNumberish,
      _pct: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDisplayDecimals(
      _tradePairId: BytesLike,
      _displayDecimals: BigNumberish,
      _isBase: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxTradeAmount(
      _tradePairId: BytesLike,
      _maxTradeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinTradeAmount(
      _tradePairId: BytesLike,
      _minTradeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPortfolio(
      _portfolio: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPriceFeed(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTradePairs(
      _tradePairs: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stringToBytes32(
      _string: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateAllRates(
      _makerRate: BigNumberish,
      _takerRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateRate(
      _tradePair: BytesLike,
      _rate: BigNumberish,
      _rateType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateRates(
      _tradePair: BytesLike,
      _makerRate: BigNumberish,
      _takerRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateTransferFeeRate(
      _rate: BigNumberish,
      _rateType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    AUCTION_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addAdmin(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addAuctionAdmin(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addOrderType(
      _tradePairId: BytesLike,
      _type: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addToken(
      _symbol: BytesLike,
      _token: string,
      _mode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addTradePair(
      _tradePairId: BytesLike,
      _baseAssetAddr: string,
      _baseDisplayDecimals: BigNumberish,
      _quoteAssetAddr: string,
      _quoteDisplayDecimals: BigNumberish,
      _minTradeAmount: BigNumberish,
      _maxTradeAmount: BigNumberish,
      _mode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bytes32ToString(
      _bytes32: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    flipCoin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAllowedSlippagePercent(
      _tradePairId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAuctionData(
      _tradePairId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDecimals(
      _tradePairId: BytesLike,
      _isBase: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDisplayDecimals(
      _tradePairId: BytesLike,
      _isBase: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMakerRate(
      _tradePairId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxTradeAmount(
      _tradePairId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinTradeAmount(
      _tradePairId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPortfolio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPriceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSymbol(
      _tradePairId: BytesLike,
      _isBase: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTakerRate(
      _tradePairId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTradePairs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTradePairsAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isAdmin(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAuctionAdmin(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isHead(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    matchAuctionOrders(
      _tradePairId: BytesLike,
      maxCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pauseAddOrder(
      _tradePairId: BytesLike,
      _addOrderPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pauseDeposit(
      _paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pauseForUpgrade(
      _paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pausePortfolio(
      _paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pauseTradePair(
      _tradePairId: BytesLike,
      _tradePairPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pauseTrading(
      _tradingPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeAdmin(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeAuctionAdmin(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeOrderType(
      _tradePairId: BytesLike,
      _type: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAllowedSlippagePercent(
      _tradePairId: BytesLike,
      _allowedSlippagePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAuctionMode(
      _tradePairId: BytesLike,
      _mode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAuctionPrice(
      _tradePairId: BytesLike,
      _price: BigNumberish,
      _pct: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDisplayDecimals(
      _tradePairId: BytesLike,
      _displayDecimals: BigNumberish,
      _isBase: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxTradeAmount(
      _tradePairId: BytesLike,
      _maxTradeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinTradeAmount(
      _tradePairId: BytesLike,
      _minTradeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPortfolio(
      _portfolio: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPriceFeed(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTradePairs(
      _tradePairs: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stringToBytes32(
      _string: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateAllRates(
      _makerRate: BigNumberish,
      _takerRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateRate(
      _tradePair: BytesLike,
      _rate: BigNumberish,
      _rateType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateRates(
      _tradePair: BytesLike,
      _makerRate: BigNumberish,
      _takerRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateTransferFeeRate(
      _rate: BigNumberish,
      _rateType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
