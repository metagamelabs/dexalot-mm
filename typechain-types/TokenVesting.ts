/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface TokenVestingInterface extends utils.Interface {
  contractName: "TokenVesting";
  functions: {
    "VERSION()": FunctionFragment;
    "beneficiary()": FunctionFragment;
    "canFundPortfolio(address)": FunctionFragment;
    "canFundWallet(address,address)": FunctionFragment;
    "cliff()": FunctionFragment;
    "duration()": FunctionFragment;
    "getPercentage()": FunctionFragment;
    "getPortfolio()": FunctionFragment;
    "owner()": FunctionFragment;
    "release(address)": FunctionFragment;
    "releaseToPortfolio(address)": FunctionFragment;
    "released(address)": FunctionFragment;
    "releasedPercentageAmount(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "revocable()": FunctionFragment;
    "revoke(address)": FunctionFragment;
    "revoked(address)": FunctionFragment;
    "setPercentage(uint256)": FunctionFragment;
    "setPortfolio(address)": FunctionFragment;
    "setStartPortfolioDeposits(uint256)": FunctionFragment;
    "start()": FunctionFragment;
    "startPortfolioDeposits()": FunctionFragment;
    "stringToBytes32(string)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "vestedAmount(address)": FunctionFragment;
    "vestedPercentageAmount(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "beneficiary",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "canFundPortfolio",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "canFundWallet",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "cliff", values?: undefined): string;
  encodeFunctionData(functionFragment: "duration", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPortfolio",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "release", values: [string]): string;
  encodeFunctionData(
    functionFragment: "releaseToPortfolio",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "released", values: [string]): string;
  encodeFunctionData(
    functionFragment: "releasedPercentageAmount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "revocable", values?: undefined): string;
  encodeFunctionData(functionFragment: "revoke", values: [string]): string;
  encodeFunctionData(functionFragment: "revoked", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setPercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPortfolio",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setStartPortfolioDeposits",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "start", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "startPortfolioDeposits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stringToBytes32",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "vestedAmount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "vestedPercentageAmount",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "beneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canFundPortfolio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canFundWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cliff", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "duration", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPortfolio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "release", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "releaseToPortfolio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "released", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "releasedPercentageAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revocable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revoke", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revoked", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPortfolio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStartPortfolioDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "start", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startPortfolioDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stringToBytes32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vestedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vestedPercentageAmount",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "TokenVestingRevoked(address)": EventFragment;
    "TokensReleased(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenVestingRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensReleased"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type TokenVestingRevokedEvent = TypedEvent<[string], { token: string }>;

export type TokenVestingRevokedEventFilter =
  TypedEventFilter<TokenVestingRevokedEvent>;

export type TokensReleasedEvent = TypedEvent<
  [string, BigNumber],
  { token: string; amount: BigNumber }
>;

export type TokensReleasedEventFilter = TypedEventFilter<TokensReleasedEvent>;

export interface TokenVesting extends BaseContract {
  contractName: "TokenVesting";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TokenVestingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    VERSION(overrides?: CallOverrides): Promise<[string]>;

    beneficiary(overrides?: CallOverrides): Promise<[string]>;

    canFundPortfolio(
      __beneficiary: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    canFundWallet(
      token: string,
      __beneficiary: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    cliff(overrides?: CallOverrides): Promise<[BigNumber]>;

    duration(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPortfolio(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    release(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    releaseToPortfolio(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    released(token: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    releasedPercentageAmount(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revocable(overrides?: CallOverrides): Promise<[boolean]>;

    revoke(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revoked(token: string, overrides?: CallOverrides): Promise<[boolean]>;

    setPercentage(
      percentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPortfolio(
      portfolio: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStartPortfolioDeposits(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    start(overrides?: CallOverrides): Promise<[BigNumber]>;

    startPortfolioDeposits(overrides?: CallOverrides): Promise<[BigNumber]>;

    stringToBytes32(
      _string: string,
      overrides?: CallOverrides
    ): Promise<[string] & { result: string }>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vestedAmount(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    vestedPercentageAmount(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  VERSION(overrides?: CallOverrides): Promise<string>;

  beneficiary(overrides?: CallOverrides): Promise<string>;

  canFundPortfolio(
    __beneficiary: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  canFundWallet(
    token: string,
    __beneficiary: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  cliff(overrides?: CallOverrides): Promise<BigNumber>;

  duration(overrides?: CallOverrides): Promise<BigNumber>;

  getPercentage(overrides?: CallOverrides): Promise<BigNumber>;

  getPortfolio(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  release(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  releaseToPortfolio(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  released(token: string, overrides?: CallOverrides): Promise<BigNumber>;

  releasedPercentageAmount(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revocable(overrides?: CallOverrides): Promise<boolean>;

  revoke(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revoked(token: string, overrides?: CallOverrides): Promise<boolean>;

  setPercentage(
    percentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPortfolio(
    portfolio: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStartPortfolioDeposits(
    time: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  start(overrides?: CallOverrides): Promise<BigNumber>;

  startPortfolioDeposits(overrides?: CallOverrides): Promise<BigNumber>;

  stringToBytes32(_string: string, overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vestedAmount(token: string, overrides?: CallOverrides): Promise<BigNumber>;

  vestedPercentageAmount(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    VERSION(overrides?: CallOverrides): Promise<string>;

    beneficiary(overrides?: CallOverrides): Promise<string>;

    canFundPortfolio(
      __beneficiary: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    canFundWallet(
      token: string,
      __beneficiary: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    cliff(overrides?: CallOverrides): Promise<BigNumber>;

    duration(overrides?: CallOverrides): Promise<BigNumber>;

    getPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    getPortfolio(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    release(token: string, overrides?: CallOverrides): Promise<void>;

    releaseToPortfolio(token: string, overrides?: CallOverrides): Promise<void>;

    released(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    releasedPercentageAmount(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    revocable(overrides?: CallOverrides): Promise<boolean>;

    revoke(token: string, overrides?: CallOverrides): Promise<void>;

    revoked(token: string, overrides?: CallOverrides): Promise<boolean>;

    setPercentage(
      percentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPortfolio(portfolio: string, overrides?: CallOverrides): Promise<void>;

    setStartPortfolioDeposits(
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    start(overrides?: CallOverrides): Promise<BigNumber>;

    startPortfolioDeposits(overrides?: CallOverrides): Promise<BigNumber>;

    stringToBytes32(
      _string: string,
      overrides?: CallOverrides
    ): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    vestedAmount(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    vestedPercentageAmount(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "TokenVestingRevoked(address)"(
      token?: null
    ): TokenVestingRevokedEventFilter;
    TokenVestingRevoked(token?: null): TokenVestingRevokedEventFilter;

    "TokensReleased(address,uint256)"(
      token?: null,
      amount?: null
    ): TokensReleasedEventFilter;
    TokensReleased(token?: null, amount?: null): TokensReleasedEventFilter;
  };

  estimateGas: {
    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    beneficiary(overrides?: CallOverrides): Promise<BigNumber>;

    canFundPortfolio(
      __beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canFundWallet(
      token: string,
      __beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cliff(overrides?: CallOverrides): Promise<BigNumber>;

    duration(overrides?: CallOverrides): Promise<BigNumber>;

    getPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    getPortfolio(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    release(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    releaseToPortfolio(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    released(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    releasedPercentageAmount(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revocable(overrides?: CallOverrides): Promise<BigNumber>;

    revoke(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revoked(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    setPercentage(
      percentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPortfolio(
      portfolio: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStartPortfolioDeposits(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    start(overrides?: CallOverrides): Promise<BigNumber>;

    startPortfolioDeposits(overrides?: CallOverrides): Promise<BigNumber>;

    stringToBytes32(
      _string: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vestedAmount(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    vestedPercentageAmount(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    beneficiary(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    canFundPortfolio(
      __beneficiary: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canFundWallet(
      token: string,
      __beneficiary: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cliff(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    duration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPercentage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPortfolio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    release(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    releaseToPortfolio(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    released(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    releasedPercentageAmount(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revocable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    revoke(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revoked(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setPercentage(
      percentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPortfolio(
      portfolio: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStartPortfolioDeposits(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    start(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    startPortfolioDeposits(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stringToBytes32(
      _string: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vestedAmount(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vestedPercentageAmount(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
