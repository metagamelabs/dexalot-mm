/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { LiquidatorJoe, LiquidatorJoeInterface } from "../LiquidatorJoe";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_joetroller",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "flashloanLender",
        type: "address",
      },
      {
        internalType: "address",
        name: "borrowToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "borrowAmount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "victimAddr",
        type: "address",
      },
    ],
    name: "doFlashloan",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "greet",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "joetroller",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "initiator",
        type: "address",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "fee",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "onFlashLoan",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_greeting",
        type: "string",
      },
    ],
    name: "setGreeting",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "";

type LiquidatorJoeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LiquidatorJoeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LiquidatorJoe__factory extends ContractFactory {
  constructor(...args: LiquidatorJoeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "LiquidatorJoe";
  }

  deploy(
    _joetroller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<LiquidatorJoe> {
    return super.deploy(_joetroller, overrides || {}) as Promise<LiquidatorJoe>;
  }
  getDeployTransaction(
    _joetroller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_joetroller, overrides || {});
  }
  attach(address: string): LiquidatorJoe {
    return super.attach(address) as LiquidatorJoe;
  }
  connect(signer: Signer): LiquidatorJoe__factory {
    return super.connect(signer) as LiquidatorJoe__factory;
  }
  static readonly contractName: "LiquidatorJoe";
  public readonly contractName: "LiquidatorJoe";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LiquidatorJoeInterface {
    return new utils.Interface(_abi) as LiquidatorJoeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LiquidatorJoe {
    return new Contract(address, _abi, signerOrProvider) as LiquidatorJoe;
  }
}
