/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type { IPortfolio, IPortfolioInterface } from "../IPortfolio";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "enum IPortfolio.Tx",
        name: "transaction",
        type: "uint8",
      },
      {
        indexed: true,
        internalType: "address",
        name: "wallet",
        type: "address",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "symbol",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "quantity",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "feeCharged",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "total",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "available",
        type: "uint256",
      },
    ],
    name: "PortfolioUpdated",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
    ],
    name: "addAdmin",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
    ],
    name: "addAuctionAdmin",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "id",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "price",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "quantity",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "quantityFilled",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalFee",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "traderaddress",
            type: "address",
          },
          {
            internalType: "enum ITradePairs.Side",
            name: "side",
            type: "uint8",
          },
          {
            internalType: "enum ITradePairs.Type1",
            name: "type1",
            type: "uint8",
          },
          {
            internalType: "enum ITradePairs.Status",
            name: "status",
            type: "uint8",
          },
        ],
        internalType: "struct ITradePairs.Order",
        name: "_maker",
        type: "tuple",
      },
      {
        internalType: "address",
        name: "_taker",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "_baseSymbol",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "_quoteSymbol",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "_baseAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_quoteAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_makerfeeCharged",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_takerfeeCharged",
        type: "uint256",
      },
    ],
    name: "addExecution",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_symbol",
        type: "bytes32",
      },
      {
        internalType: "contract IERC20Upgradeable",
        name: "_token",
        type: "address",
      },
      {
        internalType: "enum ITradePairs.AuctionMode",
        name: "auctionMode",
        type: "uint8",
      },
    ],
    name: "addToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_contract",
        type: "address",
      },
      {
        internalType: "string",
        name: "_organization",
        type: "string",
      },
    ],
    name: "addTrustedContract",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum IPortfolio.Tx",
        name: "_transaction",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "_trader",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "_symbol",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "adjustAvailable",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_from",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "_symbol",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "_quantity",
        type: "uint256",
      },
    ],
    name: "depositTokenFromContract",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "pause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "_paused",
        type: "bool",
      },
    ],
    name: "pauseDeposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
    ],
    name: "removeAdmin",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
    ],
    name: "removeAuctionAdmin",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_symbol",
        type: "bytes32",
      },
      {
        internalType: "enum ITradePairs.AuctionMode",
        name: "_mode",
        type: "uint8",
      },
    ],
    name: "setAuctionMode",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "unpause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_rate",
        type: "uint256",
      },
      {
        internalType: "enum IPortfolio.Tx",
        name: "_rateType",
        type: "uint8",
      },
    ],
    name: "updateTransferFeeRate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class IPortfolio__factory {
  static readonly abi = _abi;
  static createInterface(): IPortfolioInterface {
    return new utils.Interface(_abi) as IPortfolioInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IPortfolio {
    return new Contract(address, _abi, signerOrProvider) as IPortfolio;
  }
}
