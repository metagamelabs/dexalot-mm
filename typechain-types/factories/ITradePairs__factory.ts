/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type { ITradePairs, ITradePairsInterface } from "../ITradePairs";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_tradePairId",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "_price",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_quantity",
        type: "uint256",
      },
      {
        internalType: "enum ITradePairs.Side",
        name: "_side",
        type: "uint8",
      },
      {
        internalType: "enum ITradePairs.Type1",
        name: "_type1",
        type: "uint8",
      },
    ],
    name: "addOrder",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_tradePairId",
        type: "bytes32",
      },
      {
        internalType: "enum ITradePairs.Type1",
        name: "_type",
        type: "uint8",
      },
    ],
    name: "addOrderType",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_tradePairId",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "_baseSymbol",
        type: "bytes32",
      },
      {
        internalType: "uint8",
        name: "_baseDecimals",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "_baseDisplayDecimals",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "_quoteSymbol",
        type: "bytes32",
      },
      {
        internalType: "uint8",
        name: "_quoteDecimals",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "_quoteDisplayDecimals",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "_minTradeAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_maxTradeAmount",
        type: "uint256",
      },
      {
        internalType: "enum ITradePairs.AuctionMode",
        name: "_mode",
        type: "uint8",
      },
    ],
    name: "addTradePair",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_tradePairId",
        type: "bytes32",
      },
      {
        internalType: "bytes32[]",
        name: "_orderIds",
        type: "bytes32[]",
      },
    ],
    name: "cancelAllOrders",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_tradePairId",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "_orderId",
        type: "bytes32",
      },
    ],
    name: "cancelOrder",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_tradePairId",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "_orderId",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "_price",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_quantity",
        type: "uint256",
      },
    ],
    name: "cancelReplaceOrder",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_tradePairId",
        type: "bytes32",
      },
    ],
    name: "getAllowedSlippagePercent",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_tradePairId",
        type: "bytes32",
      },
    ],
    name: "getAuctionData",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_tradePairId",
        type: "bytes32",
      },
      {
        internalType: "bool",
        name: "_isBase",
        type: "bool",
      },
    ],
    name: "getDecimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_tradePairId",
        type: "bytes32",
      },
      {
        internalType: "bool",
        name: "_isBase",
        type: "bool",
      },
    ],
    name: "getDisplayDecimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_tradePairId",
        type: "bytes32",
      },
    ],
    name: "getMakerRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_tradePairId",
        type: "bytes32",
      },
    ],
    name: "getMaxTradeAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_tradePairId",
        type: "bytes32",
      },
    ],
    name: "getMinTradeAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_tradePairId",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "nPrice",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "nOrder",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "lastPrice",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "lastOrder",
        type: "bytes32",
      },
    ],
    name: "getNBuyBook",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_tradePairId",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "nPrice",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "nOrder",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "lastPrice",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "lastOrder",
        type: "bytes32",
      },
    ],
    name: "getNSellBook",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_orderUid",
        type: "bytes32",
      },
    ],
    name: "getOrder",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "id",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "price",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "quantity",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "quantityFilled",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalFee",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "traderaddress",
            type: "address",
          },
          {
            internalType: "enum ITradePairs.Side",
            name: "side",
            type: "uint8",
          },
          {
            internalType: "enum ITradePairs.Type1",
            name: "type1",
            type: "uint8",
          },
          {
            internalType: "enum ITradePairs.Status",
            name: "status",
            type: "uint8",
          },
        ],
        internalType: "struct ITradePairs.Order",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_tradePairId",
        type: "bytes32",
      },
      {
        internalType: "bool",
        name: "_isBase",
        type: "bool",
      },
    ],
    name: "getSymbol",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_tradePairId",
        type: "bytes32",
      },
    ],
    name: "getTakerRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getTradePairs",
    outputs: [
      {
        internalType: "bytes32[]",
        name: "",
        type: "bytes32[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_tradePairId",
        type: "bytes32",
      },
      {
        internalType: "uint8",
        name: "maxCount",
        type: "uint8",
      },
    ],
    name: "matchAuctionOrders",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "pause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_tradePairId",
        type: "bytes32",
      },
      {
        internalType: "bool",
        name: "_allowAddOrder",
        type: "bool",
      },
    ],
    name: "pauseAddOrder",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_tradePairId",
        type: "bytes32",
      },
      {
        internalType: "bool",
        name: "_pairPaused",
        type: "bool",
      },
    ],
    name: "pauseTradePair",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_tradePairId",
        type: "bytes32",
      },
      {
        internalType: "enum ITradePairs.Type1",
        name: "_type",
        type: "uint8",
      },
    ],
    name: "removeOrderType",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_tradePairId",
        type: "bytes32",
      },
      {
        internalType: "uint8",
        name: "_allowedSlippagePercent",
        type: "uint8",
      },
    ],
    name: "setAllowedSlippagePercent",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_tradePairId",
        type: "bytes32",
      },
      {
        internalType: "enum ITradePairs.AuctionMode",
        name: "_mode",
        type: "uint8",
      },
    ],
    name: "setAuctionMode",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_tradePairId",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "_price",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_pct",
        type: "uint256",
      },
    ],
    name: "setAuctionPrice",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_tradePairId",
        type: "bytes32",
      },
      {
        internalType: "uint8",
        name: "_displayDecimals",
        type: "uint8",
      },
      {
        internalType: "bool",
        name: "_isBase",
        type: "bool",
      },
    ],
    name: "setDisplayDecimals",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_tradePairId",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "_maxTradeAmount",
        type: "uint256",
      },
    ],
    name: "setMaxTradeAmount",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_tradePairId",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "_minTradeAmount",
        type: "uint256",
      },
    ],
    name: "setMinTradeAmount",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "unpause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_tradePairId",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "_rate",
        type: "uint256",
      },
      {
        internalType: "enum ITradePairs.RateType",
        name: "_rateType",
        type: "uint8",
      },
    ],
    name: "updateRate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class ITradePairs__factory {
  static readonly abi = _abi;
  static createInterface(): ITradePairsInterface {
    return new utils.Interface(_abi) as ITradePairsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ITradePairs {
    return new Contract(address, _abi, signerOrProvider) as ITradePairs;
  }
}
