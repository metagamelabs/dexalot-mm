/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace ITradePairs {
  export type OrderStruct = {
    id: BytesLike;
    price: BigNumberish;
    totalAmount: BigNumberish;
    quantity: BigNumberish;
    quantityFilled: BigNumberish;
    totalFee: BigNumberish;
    traderaddress: string;
    side: BigNumberish;
    type1: BigNumberish;
    status: BigNumberish;
  };

  export type OrderStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    number,
    number,
    number
  ] & {
    id: string;
    price: BigNumber;
    totalAmount: BigNumber;
    quantity: BigNumber;
    quantityFilled: BigNumber;
    totalFee: BigNumber;
    traderaddress: string;
    side: number;
    type1: number;
    status: number;
  };
}

export interface TradePairsInterface extends utils.Interface {
  contractName: "TradePairs";
  functions: {
    "TENK()": FunctionFragment;
    "VERSION()": FunctionFragment;
    "addOrder(bytes32,uint256,uint256,uint8,uint8)": FunctionFragment;
    "addOrderType(bytes32,uint8)": FunctionFragment;
    "addTradePair(bytes32,bytes32,uint8,uint8,bytes32,uint8,uint8,uint256,uint256,uint8)": FunctionFragment;
    "cancelAllOrders(bytes32,bytes32[])": FunctionFragment;
    "cancelOrder(bytes32,bytes32)": FunctionFragment;
    "cancelReplaceOrder(bytes32,bytes32,uint256,uint256)": FunctionFragment;
    "ceil(uint256,uint256)": FunctionFragment;
    "floor(uint256,uint256)": FunctionFragment;
    "getAllowedOrderTypes(bytes32)": FunctionFragment;
    "getAllowedSlippagePercent(bytes32)": FunctionFragment;
    "getAuctionData(bytes32)": FunctionFragment;
    "getDecimals(bytes32,bool)": FunctionFragment;
    "getDisplayDecimals(bytes32,bool)": FunctionFragment;
    "getMakerRate(bytes32)": FunctionFragment;
    "getMaxTradeAmount(bytes32)": FunctionFragment;
    "getMinTradeAmount(bytes32)": FunctionFragment;
    "getNBuyBook(bytes32,uint256,uint256,uint256,bytes32)": FunctionFragment;
    "getNSellBook(bytes32,uint256,uint256,uint256,bytes32)": FunctionFragment;
    "getOrder(bytes32)": FunctionFragment;
    "getSymbol(bytes32,bool)": FunctionFragment;
    "getTakerRate(bytes32)": FunctionFragment;
    "getTradePairs()": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "matchAuctionOrders(bytes32,uint8)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "pauseAddOrder(bytes32,bool)": FunctionFragment;
    "pauseTradePair(bytes32,bool)": FunctionFragment;
    "paused()": FunctionFragment;
    "removeOrderType(bytes32,uint8)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAllowedSlippagePercent(bytes32,uint8)": FunctionFragment;
    "setAuctionMode(bytes32,uint8)": FunctionFragment;
    "setAuctionPrice(bytes32,uint256,uint256)": FunctionFragment;
    "setDisplayDecimals(bytes32,uint8,bool)": FunctionFragment;
    "setMaxTradeAmount(bytes32,uint256)": FunctionFragment;
    "setMinTradeAmount(bytes32,uint256)": FunctionFragment;
    "tradePairExists(bytes32)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateRate(bytes32,uint256,uint8)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "TENK", values?: undefined): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addOrder",
    values: [BytesLike, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addOrderType",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addTradePair",
    values: [
      BytesLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelAllOrders",
    values: [BytesLike, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOrder",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelReplaceOrder",
    values: [BytesLike, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ceil",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "floor",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllowedOrderTypes",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllowedSlippagePercent",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionData",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDecimals",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getDisplayDecimals",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getMakerRate",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxTradeAmount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinTradeAmount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getNBuyBook",
    values: [BytesLike, BigNumberish, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getNSellBook",
    values: [BytesLike, BigNumberish, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getOrder", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getSymbol",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getTakerRate",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTradePairs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "matchAuctionOrders",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pauseAddOrder",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "pauseTradePair",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeOrderType",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowedSlippagePercent",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuctionMode",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuctionPrice",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDisplayDecimals",
    values: [BytesLike, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxTradeAmount",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinTradeAmount",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tradePairExists",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateRate",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "TENK", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addOrderType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addTradePair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelAllOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelReplaceOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ceil", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "floor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllowedOrderTypes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllowedSlippagePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDisplayDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMakerRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxTradeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinTradeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNBuyBook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNSellBook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOrder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getSymbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTakerRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTradePairs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "matchAuctionOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauseAddOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pauseTradePair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeOrderType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAllowedSlippagePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuctionMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuctionPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDisplayDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxTradeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinTradeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradePairExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateRate", data: BytesLike): Result;

  events: {
    "Executed(bytes32,uint256,uint256,bytes32,bytes32,uint256,uint256,bool,uint256)": EventFragment;
    "NewTradePair(bytes32,uint8,uint8,uint256,uint256)": EventFragment;
    "OrderStatusChanged(address,bytes32,bytes32,uint256,uint256,uint256,uint8,uint8,uint8,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ParameterUpdated(bytes32,string,uint256,uint256)": EventFragment;
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Executed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewTradePair"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderStatusChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParameterUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export type ExecutedEvent = TypedEvent<
  [
    string,
    BigNumber,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    boolean,
    BigNumber
  ],
  {
    pair: string;
    price: BigNumber;
    quantity: BigNumber;
    maker: string;
    taker: string;
    feeMaker: BigNumber;
    feeTaker: BigNumber;
    feeMakerBase: boolean;
    execId: BigNumber;
  }
>;

export type ExecutedEventFilter = TypedEventFilter<ExecutedEvent>;

export type NewTradePairEvent = TypedEvent<
  [string, number, number, BigNumber, BigNumber],
  {
    pair: string;
    basedisplaydecimals: number;
    quotedisplaydecimals: number;
    mintradeamount: BigNumber;
    maxtradeamount: BigNumber;
  }
>;

export type NewTradePairEventFilter = TypedEventFilter<NewTradePairEvent>;

export type OrderStatusChangedEvent = TypedEvent<
  [
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    number,
    number,
    BigNumber,
    BigNumber
  ],
  {
    traderaddress: string;
    pair: string;
    id: string;
    price: BigNumber;
    totalamount: BigNumber;
    quantity: BigNumber;
    side: number;
    type1: number;
    status: number;
    quantityfilled: BigNumber;
    totalfee: BigNumber;
  }
>;

export type OrderStatusChangedEventFilter =
  TypedEventFilter<OrderStatusChangedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type ParameterUpdatedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  { pair: string; param: string; oldValue: BigNumber; newValue: BigNumber }
>;

export type ParameterUpdatedEventFilter =
  TypedEventFilter<ParameterUpdatedEvent>;

export type PausedEvent = TypedEvent<[string], { account: string }>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type UnpausedEvent = TypedEvent<[string], { account: string }>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface TradePairs extends BaseContract {
  contractName: "TradePairs";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TradePairsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    TENK(overrides?: CallOverrides): Promise<[BigNumber]>;

    VERSION(overrides?: CallOverrides): Promise<[string]>;

    addOrder(
      _tradePairId: BytesLike,
      _price: BigNumberish,
      _quantity: BigNumberish,
      _side: BigNumberish,
      _type1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addOrderType(
      _tradePairId: BytesLike,
      _type: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addTradePair(
      _tradePairId: BytesLike,
      _baseSymbol: BytesLike,
      _baseDecimals: BigNumberish,
      _baseDisplayDecimals: BigNumberish,
      _quoteSymbol: BytesLike,
      _quoteDecimals: BigNumberish,
      _quoteDisplayDecimals: BigNumberish,
      _minTradeAmount: BigNumberish,
      _maxTradeAmount: BigNumberish,
      _mode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelAllOrders(
      _tradePairId: BytesLike,
      _orderIds: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelOrder(
      _tradePairId: BytesLike,
      _orderId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelReplaceOrder(
      _tradePairId: BytesLike,
      _orderId: BytesLike,
      _price: BigNumberish,
      _quantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ceil(
      a: BigNumberish,
      m: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    floor(
      a: BigNumberish,
      m: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAllowedOrderTypes(
      _tradePairId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getAllowedSlippagePercent(
      _tradePairId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getAuctionData(
      _tradePairId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber, BigNumber, BigNumber] & {
        mode: number;
        price: BigNumber;
        percent: BigNumber;
        lower: BigNumber;
        upper: BigNumber;
      }
    >;

    getDecimals(
      _tradePairId: BytesLike,
      _isBase: boolean,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getDisplayDecimals(
      _tradePairId: BytesLike,
      _isBase: boolean,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getMakerRate(
      _tradePairId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMaxTradeAmount(
      _tradePairId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMinTradeAmount(
      _tradePairId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNBuyBook(
      _tradePairId: BytesLike,
      nPrice: BigNumberish,
      nOrder: BigNumberish,
      lastPrice: BigNumberish,
      lastOrder: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], BigNumber[], BigNumber, string]>;

    getNSellBook(
      _tradePairId: BytesLike,
      nPrice: BigNumberish,
      nOrder: BigNumberish,
      lastPrice: BigNumberish,
      lastOrder: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], BigNumber[], BigNumber, string]>;

    getOrder(
      _orderId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[ITradePairs.OrderStructOutput]>;

    getSymbol(
      _tradePairId: BytesLike,
      _isBase: boolean,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getTakerRate(
      _tradePairId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTradePairs(overrides?: CallOverrides): Promise<[string[]]>;

    initialize(
      _orderbooks: string,
      _portfolio: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    matchAuctionOrders(
      _tradePairId: BytesLike,
      _maxCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pauseAddOrder(
      _tradePairId: BytesLike,
      _addOrderPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pauseTradePair(
      _tradePairId: BytesLike,
      _pairPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    removeOrderType(
      _tradePairId: BytesLike,
      _type: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAllowedSlippagePercent(
      _tradePairId: BytesLike,
      _allowedSlippagePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAuctionMode(
      _tradePairId: BytesLike,
      _mode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAuctionPrice(
      _tradePairId: BytesLike,
      _price: BigNumberish,
      _pct: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDisplayDecimals(
      _tradePairId: BytesLike,
      _displayDecimals: BigNumberish,
      _isBase: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxTradeAmount(
      _tradePairId: BytesLike,
      _maxTradeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinTradeAmount(
      _tradePairId: BytesLike,
      _minTradeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tradePairExists(
      _tradePairId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateRate(
      _tradePairId: BytesLike,
      _rate: BigNumberish,
      _rateType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  TENK(overrides?: CallOverrides): Promise<BigNumber>;

  VERSION(overrides?: CallOverrides): Promise<string>;

  addOrder(
    _tradePairId: BytesLike,
    _price: BigNumberish,
    _quantity: BigNumberish,
    _side: BigNumberish,
    _type1: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addOrderType(
    _tradePairId: BytesLike,
    _type: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addTradePair(
    _tradePairId: BytesLike,
    _baseSymbol: BytesLike,
    _baseDecimals: BigNumberish,
    _baseDisplayDecimals: BigNumberish,
    _quoteSymbol: BytesLike,
    _quoteDecimals: BigNumberish,
    _quoteDisplayDecimals: BigNumberish,
    _minTradeAmount: BigNumberish,
    _maxTradeAmount: BigNumberish,
    _mode: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelAllOrders(
    _tradePairId: BytesLike,
    _orderIds: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelOrder(
    _tradePairId: BytesLike,
    _orderId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelReplaceOrder(
    _tradePairId: BytesLike,
    _orderId: BytesLike,
    _price: BigNumberish,
    _quantity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ceil(
    a: BigNumberish,
    m: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  floor(
    a: BigNumberish,
    m: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAllowedOrderTypes(
    _tradePairId: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getAllowedSlippagePercent(
    _tradePairId: BytesLike,
    overrides?: CallOverrides
  ): Promise<number>;

  getAuctionData(
    _tradePairId: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, BigNumber, BigNumber, BigNumber] & {
      mode: number;
      price: BigNumber;
      percent: BigNumber;
      lower: BigNumber;
      upper: BigNumber;
    }
  >;

  getDecimals(
    _tradePairId: BytesLike,
    _isBase: boolean,
    overrides?: CallOverrides
  ): Promise<number>;

  getDisplayDecimals(
    _tradePairId: BytesLike,
    _isBase: boolean,
    overrides?: CallOverrides
  ): Promise<number>;

  getMakerRate(
    _tradePairId: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMaxTradeAmount(
    _tradePairId: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMinTradeAmount(
    _tradePairId: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNBuyBook(
    _tradePairId: BytesLike,
    nPrice: BigNumberish,
    nOrder: BigNumberish,
    lastPrice: BigNumberish,
    lastOrder: BytesLike,
    overrides?: CallOverrides
  ): Promise<[BigNumber[], BigNumber[], BigNumber, string]>;

  getNSellBook(
    _tradePairId: BytesLike,
    nPrice: BigNumberish,
    nOrder: BigNumberish,
    lastPrice: BigNumberish,
    lastOrder: BytesLike,
    overrides?: CallOverrides
  ): Promise<[BigNumber[], BigNumber[], BigNumber, string]>;

  getOrder(
    _orderId: BytesLike,
    overrides?: CallOverrides
  ): Promise<ITradePairs.OrderStructOutput>;

  getSymbol(
    _tradePairId: BytesLike,
    _isBase: boolean,
    overrides?: CallOverrides
  ): Promise<string>;

  getTakerRate(
    _tradePairId: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTradePairs(overrides?: CallOverrides): Promise<string[]>;

  initialize(
    _orderbooks: string,
    _portfolio: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  matchAuctionOrders(
    _tradePairId: BytesLike,
    _maxCount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pauseAddOrder(
    _tradePairId: BytesLike,
    _addOrderPaused: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pauseTradePair(
    _tradePairId: BytesLike,
    _pairPaused: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  removeOrderType(
    _tradePairId: BytesLike,
    _type: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAllowedSlippagePercent(
    _tradePairId: BytesLike,
    _allowedSlippagePercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAuctionMode(
    _tradePairId: BytesLike,
    _mode: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAuctionPrice(
    _tradePairId: BytesLike,
    _price: BigNumberish,
    _pct: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDisplayDecimals(
    _tradePairId: BytesLike,
    _displayDecimals: BigNumberish,
    _isBase: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxTradeAmount(
    _tradePairId: BytesLike,
    _maxTradeAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinTradeAmount(
    _tradePairId: BytesLike,
    _minTradeAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tradePairExists(
    _tradePairId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateRate(
    _tradePairId: BytesLike,
    _rate: BigNumberish,
    _rateType: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    TENK(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION(overrides?: CallOverrides): Promise<string>;

    addOrder(
      _tradePairId: BytesLike,
      _price: BigNumberish,
      _quantity: BigNumberish,
      _side: BigNumberish,
      _type1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addOrderType(
      _tradePairId: BytesLike,
      _type: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addTradePair(
      _tradePairId: BytesLike,
      _baseSymbol: BytesLike,
      _baseDecimals: BigNumberish,
      _baseDisplayDecimals: BigNumberish,
      _quoteSymbol: BytesLike,
      _quoteDecimals: BigNumberish,
      _quoteDisplayDecimals: BigNumberish,
      _minTradeAmount: BigNumberish,
      _maxTradeAmount: BigNumberish,
      _mode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelAllOrders(
      _tradePairId: BytesLike,
      _orderIds: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    cancelOrder(
      _tradePairId: BytesLike,
      _orderId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelReplaceOrder(
      _tradePairId: BytesLike,
      _orderId: BytesLike,
      _price: BigNumberish,
      _quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    ceil(
      a: BigNumberish,
      m: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    floor(
      a: BigNumberish,
      m: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllowedOrderTypes(
      _tradePairId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getAllowedSlippagePercent(
      _tradePairId: BytesLike,
      overrides?: CallOverrides
    ): Promise<number>;

    getAuctionData(
      _tradePairId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber, BigNumber, BigNumber] & {
        mode: number;
        price: BigNumber;
        percent: BigNumber;
        lower: BigNumber;
        upper: BigNumber;
      }
    >;

    getDecimals(
      _tradePairId: BytesLike,
      _isBase: boolean,
      overrides?: CallOverrides
    ): Promise<number>;

    getDisplayDecimals(
      _tradePairId: BytesLike,
      _isBase: boolean,
      overrides?: CallOverrides
    ): Promise<number>;

    getMakerRate(
      _tradePairId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxTradeAmount(
      _tradePairId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinTradeAmount(
      _tradePairId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNBuyBook(
      _tradePairId: BytesLike,
      nPrice: BigNumberish,
      nOrder: BigNumberish,
      lastPrice: BigNumberish,
      lastOrder: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], BigNumber[], BigNumber, string]>;

    getNSellBook(
      _tradePairId: BytesLike,
      nPrice: BigNumberish,
      nOrder: BigNumberish,
      lastPrice: BigNumberish,
      lastOrder: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], BigNumber[], BigNumber, string]>;

    getOrder(
      _orderId: BytesLike,
      overrides?: CallOverrides
    ): Promise<ITradePairs.OrderStructOutput>;

    getSymbol(
      _tradePairId: BytesLike,
      _isBase: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    getTakerRate(
      _tradePairId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTradePairs(overrides?: CallOverrides): Promise<string[]>;

    initialize(
      _orderbooks: string,
      _portfolio: string,
      overrides?: CallOverrides
    ): Promise<void>;

    matchAuctionOrders(
      _tradePairId: BytesLike,
      _maxCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    pauseAddOrder(
      _tradePairId: BytesLike,
      _addOrderPaused: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    pauseTradePair(
      _tradePairId: BytesLike,
      _pairPaused: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    removeOrderType(
      _tradePairId: BytesLike,
      _type: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAllowedSlippagePercent(
      _tradePairId: BytesLike,
      _allowedSlippagePercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setAuctionMode(
      _tradePairId: BytesLike,
      _mode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setAuctionPrice(
      _tradePairId: BytesLike,
      _price: BigNumberish,
      _pct: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDisplayDecimals(
      _tradePairId: BytesLike,
      _displayDecimals: BigNumberish,
      _isBase: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxTradeAmount(
      _tradePairId: BytesLike,
      _maxTradeAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinTradeAmount(
      _tradePairId: BytesLike,
      _minTradeAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    tradePairExists(
      _tradePairId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updateRate(
      _tradePairId: BytesLike,
      _rate: BigNumberish,
      _rateType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Executed(bytes32,uint256,uint256,bytes32,bytes32,uint256,uint256,bool,uint256)"(
      pair?: BytesLike | null,
      price?: null,
      quantity?: null,
      maker?: null,
      taker?: null,
      feeMaker?: null,
      feeTaker?: null,
      feeMakerBase?: null,
      execId?: null
    ): ExecutedEventFilter;
    Executed(
      pair?: BytesLike | null,
      price?: null,
      quantity?: null,
      maker?: null,
      taker?: null,
      feeMaker?: null,
      feeTaker?: null,
      feeMakerBase?: null,
      execId?: null
    ): ExecutedEventFilter;

    "NewTradePair(bytes32,uint8,uint8,uint256,uint256)"(
      pair?: null,
      basedisplaydecimals?: null,
      quotedisplaydecimals?: null,
      mintradeamount?: null,
      maxtradeamount?: null
    ): NewTradePairEventFilter;
    NewTradePair(
      pair?: null,
      basedisplaydecimals?: null,
      quotedisplaydecimals?: null,
      mintradeamount?: null,
      maxtradeamount?: null
    ): NewTradePairEventFilter;

    "OrderStatusChanged(address,bytes32,bytes32,uint256,uint256,uint256,uint8,uint8,uint8,uint256,uint256)"(
      traderaddress?: string | null,
      pair?: BytesLike | null,
      id?: null,
      price?: null,
      totalamount?: null,
      quantity?: null,
      side?: null,
      type1?: null,
      status?: null,
      quantityfilled?: null,
      totalfee?: null
    ): OrderStatusChangedEventFilter;
    OrderStatusChanged(
      traderaddress?: string | null,
      pair?: BytesLike | null,
      id?: null,
      price?: null,
      totalamount?: null,
      quantity?: null,
      side?: null,
      type1?: null,
      status?: null,
      quantityfilled?: null,
      totalfee?: null
    ): OrderStatusChangedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "ParameterUpdated(bytes32,string,uint256,uint256)"(
      pair?: BytesLike | null,
      param?: null,
      oldValue?: null,
      newValue?: null
    ): ParameterUpdatedEventFilter;
    ParameterUpdated(
      pair?: BytesLike | null,
      param?: null,
      oldValue?: null,
      newValue?: null
    ): ParameterUpdatedEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    TENK(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    addOrder(
      _tradePairId: BytesLike,
      _price: BigNumberish,
      _quantity: BigNumberish,
      _side: BigNumberish,
      _type1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addOrderType(
      _tradePairId: BytesLike,
      _type: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addTradePair(
      _tradePairId: BytesLike,
      _baseSymbol: BytesLike,
      _baseDecimals: BigNumberish,
      _baseDisplayDecimals: BigNumberish,
      _quoteSymbol: BytesLike,
      _quoteDecimals: BigNumberish,
      _quoteDisplayDecimals: BigNumberish,
      _minTradeAmount: BigNumberish,
      _maxTradeAmount: BigNumberish,
      _mode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelAllOrders(
      _tradePairId: BytesLike,
      _orderIds: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelOrder(
      _tradePairId: BytesLike,
      _orderId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelReplaceOrder(
      _tradePairId: BytesLike,
      _orderId: BytesLike,
      _price: BigNumberish,
      _quantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ceil(
      a: BigNumberish,
      m: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    floor(
      a: BigNumberish,
      m: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllowedOrderTypes(
      _tradePairId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllowedSlippagePercent(
      _tradePairId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuctionData(
      _tradePairId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDecimals(
      _tradePairId: BytesLike,
      _isBase: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDisplayDecimals(
      _tradePairId: BytesLike,
      _isBase: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMakerRate(
      _tradePairId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxTradeAmount(
      _tradePairId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinTradeAmount(
      _tradePairId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNBuyBook(
      _tradePairId: BytesLike,
      nPrice: BigNumberish,
      nOrder: BigNumberish,
      lastPrice: BigNumberish,
      lastOrder: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNSellBook(
      _tradePairId: BytesLike,
      nPrice: BigNumberish,
      nOrder: BigNumberish,
      lastPrice: BigNumberish,
      lastOrder: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrder(
      _orderId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSymbol(
      _tradePairId: BytesLike,
      _isBase: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTakerRate(
      _tradePairId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTradePairs(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _orderbooks: string,
      _portfolio: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    matchAuctionOrders(
      _tradePairId: BytesLike,
      _maxCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pauseAddOrder(
      _tradePairId: BytesLike,
      _addOrderPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pauseTradePair(
      _tradePairId: BytesLike,
      _pairPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    removeOrderType(
      _tradePairId: BytesLike,
      _type: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAllowedSlippagePercent(
      _tradePairId: BytesLike,
      _allowedSlippagePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAuctionMode(
      _tradePairId: BytesLike,
      _mode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAuctionPrice(
      _tradePairId: BytesLike,
      _price: BigNumberish,
      _pct: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDisplayDecimals(
      _tradePairId: BytesLike,
      _displayDecimals: BigNumberish,
      _isBase: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxTradeAmount(
      _tradePairId: BytesLike,
      _maxTradeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinTradeAmount(
      _tradePairId: BytesLike,
      _minTradeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tradePairExists(
      _tradePairId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateRate(
      _tradePairId: BytesLike,
      _rate: BigNumberish,
      _rateType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    TENK(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addOrder(
      _tradePairId: BytesLike,
      _price: BigNumberish,
      _quantity: BigNumberish,
      _side: BigNumberish,
      _type1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addOrderType(
      _tradePairId: BytesLike,
      _type: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addTradePair(
      _tradePairId: BytesLike,
      _baseSymbol: BytesLike,
      _baseDecimals: BigNumberish,
      _baseDisplayDecimals: BigNumberish,
      _quoteSymbol: BytesLike,
      _quoteDecimals: BigNumberish,
      _quoteDisplayDecimals: BigNumberish,
      _minTradeAmount: BigNumberish,
      _maxTradeAmount: BigNumberish,
      _mode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelAllOrders(
      _tradePairId: BytesLike,
      _orderIds: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelOrder(
      _tradePairId: BytesLike,
      _orderId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelReplaceOrder(
      _tradePairId: BytesLike,
      _orderId: BytesLike,
      _price: BigNumberish,
      _quantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ceil(
      a: BigNumberish,
      m: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    floor(
      a: BigNumberish,
      m: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllowedOrderTypes(
      _tradePairId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllowedSlippagePercent(
      _tradePairId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAuctionData(
      _tradePairId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDecimals(
      _tradePairId: BytesLike,
      _isBase: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDisplayDecimals(
      _tradePairId: BytesLike,
      _isBase: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMakerRate(
      _tradePairId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxTradeAmount(
      _tradePairId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinTradeAmount(
      _tradePairId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNBuyBook(
      _tradePairId: BytesLike,
      nPrice: BigNumberish,
      nOrder: BigNumberish,
      lastPrice: BigNumberish,
      lastOrder: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNSellBook(
      _tradePairId: BytesLike,
      nPrice: BigNumberish,
      nOrder: BigNumberish,
      lastPrice: BigNumberish,
      lastOrder: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrder(
      _orderId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSymbol(
      _tradePairId: BytesLike,
      _isBase: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTakerRate(
      _tradePairId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTradePairs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _orderbooks: string,
      _portfolio: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    matchAuctionOrders(
      _tradePairId: BytesLike,
      _maxCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pauseAddOrder(
      _tradePairId: BytesLike,
      _addOrderPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pauseTradePair(
      _tradePairId: BytesLike,
      _pairPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeOrderType(
      _tradePairId: BytesLike,
      _type: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAllowedSlippagePercent(
      _tradePairId: BytesLike,
      _allowedSlippagePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAuctionMode(
      _tradePairId: BytesLike,
      _mode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAuctionPrice(
      _tradePairId: BytesLike,
      _price: BigNumberish,
      _pct: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDisplayDecimals(
      _tradePairId: BytesLike,
      _displayDecimals: BigNumberish,
      _isBase: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxTradeAmount(
      _tradePairId: BytesLike,
      _maxTradeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinTradeAmount(
      _tradePairId: BytesLike,
      _minTradeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tradePairExists(
      _tradePairId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateRate(
      _tradePairId: BytesLike,
      _rate: BigNumberish,
      _rateType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
