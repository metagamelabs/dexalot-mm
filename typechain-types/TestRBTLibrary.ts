/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface TestRBTLibraryInterface extends utils.Interface {
  contractName: "TestRBTLibrary";
  functions: {
    "exists(uint256)": FunctionFragment;
    "first()": FunctionFragment;
    "getEmpty()": FunctionFragment;
    "getNode(uint256)": FunctionFragment;
    "insert(uint256,uint256)": FunctionFragment;
    "isEmpty(uint256)": FunctionFragment;
    "last()": FunctionFragment;
    "next(uint256)": FunctionFragment;
    "prev(uint256)": FunctionFragment;
    "remove(uint256)": FunctionFragment;
    "root()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "exists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "first", values?: undefined): string;
  encodeFunctionData(functionFragment: "getEmpty", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getNode",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "insert",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isEmpty",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "last", values?: undefined): string;
  encodeFunctionData(functionFragment: "next", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "prev", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "remove",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "root", values?: undefined): string;

  decodeFunctionResult(functionFragment: "exists", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "first", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getEmpty", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getNode", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "insert", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isEmpty", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "last", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "next", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "prev", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "remove", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "root", data: BytesLike): Result;

  events: {
    "Log(string,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Log"): EventFragment;
}

export type LogEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { where: string; key: BigNumber; value: BigNumber }
>;

export type LogEventFilter = TypedEventFilter<LogEvent>;

export interface TestRBTLibrary extends BaseContract {
  contractName: "TestRBTLibrary";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TestRBTLibraryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    exists(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { _exists: boolean }>;

    first(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _key: BigNumber }>;

    getEmpty(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNode(
      _key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, boolean, BigNumber] & {
        key: BigNumber;
        parent: BigNumber;
        left: BigNumber;
        right: BigNumber;
        red: boolean;
        value: BigNumber;
      }
    >;

    insert(
      _key: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isEmpty(key: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>;

    last(overrides?: CallOverrides): Promise<[BigNumber] & { _key: BigNumber }>;

    next(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _key: BigNumber }>;

    prev(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _key: BigNumber }>;

    remove(
      _key: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    root(overrides?: CallOverrides): Promise<[BigNumber] & { _key: BigNumber }>;
  };

  exists(key: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  first(overrides?: CallOverrides): Promise<BigNumber>;

  getEmpty(overrides?: CallOverrides): Promise<BigNumber>;

  getNode(
    _key: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, boolean, BigNumber] & {
      key: BigNumber;
      parent: BigNumber;
      left: BigNumber;
      right: BigNumber;
      red: boolean;
      value: BigNumber;
    }
  >;

  insert(
    _key: BigNumberish,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isEmpty(key: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  last(overrides?: CallOverrides): Promise<BigNumber>;

  next(key: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  prev(key: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  remove(
    _key: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  root(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    exists(key: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    first(overrides?: CallOverrides): Promise<BigNumber>;

    getEmpty(overrides?: CallOverrides): Promise<BigNumber>;

    getNode(
      _key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, boolean, BigNumber] & {
        key: BigNumber;
        parent: BigNumber;
        left: BigNumber;
        right: BigNumber;
        red: boolean;
        value: BigNumber;
      }
    >;

    insert(
      _key: BigNumberish,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isEmpty(key: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    last(overrides?: CallOverrides): Promise<BigNumber>;

    next(key: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    prev(key: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    remove(_key: BigNumberish, overrides?: CallOverrides): Promise<void>;

    root(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Log(string,uint256,uint256)"(
      where?: null,
      key?: null,
      value?: null
    ): LogEventFilter;
    Log(where?: null, key?: null, value?: null): LogEventFilter;
  };

  estimateGas: {
    exists(key: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    first(overrides?: CallOverrides): Promise<BigNumber>;

    getEmpty(overrides?: CallOverrides): Promise<BigNumber>;

    getNode(_key: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    insert(
      _key: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isEmpty(key: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    last(overrides?: CallOverrides): Promise<BigNumber>;

    next(key: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    prev(key: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    remove(
      _key: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    root(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    exists(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    first(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEmpty(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNode(
      _key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    insert(
      _key: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isEmpty(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    last(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    next(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    prev(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    remove(
      _key: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    root(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
