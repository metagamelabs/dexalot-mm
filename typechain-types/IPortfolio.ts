/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace ITradePairs {
  export type OrderStruct = {
    id: BytesLike;
    price: BigNumberish;
    totalAmount: BigNumberish;
    quantity: BigNumberish;
    quantityFilled: BigNumberish;
    totalFee: BigNumberish;
    traderaddress: string;
    side: BigNumberish;
    type1: BigNumberish;
    status: BigNumberish;
  };

  export type OrderStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    number,
    number,
    number
  ] & {
    id: string;
    price: BigNumber;
    totalAmount: BigNumber;
    quantity: BigNumber;
    quantityFilled: BigNumber;
    totalFee: BigNumber;
    traderaddress: string;
    side: number;
    type1: number;
    status: number;
  };
}

export interface IPortfolioInterface extends utils.Interface {
  contractName: "IPortfolio";
  functions: {
    "addAdmin(address)": FunctionFragment;
    "addAuctionAdmin(address)": FunctionFragment;
    "addExecution((bytes32,uint256,uint256,uint256,uint256,uint256,address,uint8,uint8,uint8),address,bytes32,bytes32,uint256,uint256,uint256,uint256)": FunctionFragment;
    "addToken(bytes32,address,uint8)": FunctionFragment;
    "addTrustedContract(address,string)": FunctionFragment;
    "adjustAvailable(uint8,address,bytes32,uint256)": FunctionFragment;
    "depositTokenFromContract(address,bytes32,uint256)": FunctionFragment;
    "pause()": FunctionFragment;
    "pauseDeposit(bool)": FunctionFragment;
    "removeAdmin(address)": FunctionFragment;
    "removeAuctionAdmin(address)": FunctionFragment;
    "setAuctionMode(bytes32,uint8)": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateTransferFeeRate(uint256,uint8)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "addAuctionAdmin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addExecution",
    values: [
      ITradePairs.OrderStruct,
      string,
      BytesLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addToken",
    values: [BytesLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addTrustedContract",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "adjustAvailable",
    values: [BigNumberish, string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositTokenFromContract",
    values: [string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pauseDeposit",
    values: [boolean]
  ): string;
  encodeFunctionData(functionFragment: "removeAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "removeAuctionAdmin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuctionMode",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateTransferFeeRate",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addAuctionAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addExecution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addTrustedContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adjustAvailable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositTokenFromContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauseDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAuctionAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuctionMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateTransferFeeRate",
    data: BytesLike
  ): Result;

  events: {
    "PortfolioUpdated(uint8,address,bytes32,uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PortfolioUpdated"): EventFragment;
}

export type PortfolioUpdatedEvent = TypedEvent<
  [number, string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    transaction: number;
    wallet: string;
    symbol: string;
    quantity: BigNumber;
    feeCharged: BigNumber;
    total: BigNumber;
    available: BigNumber;
  }
>;

export type PortfolioUpdatedEventFilter =
  TypedEventFilter<PortfolioUpdatedEvent>;

export interface IPortfolio extends BaseContract {
  contractName: "IPortfolio";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPortfolioInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addAdmin(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addAuctionAdmin(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addExecution(
      _maker: ITradePairs.OrderStruct,
      _taker: string,
      _baseSymbol: BytesLike,
      _quoteSymbol: BytesLike,
      _baseAmount: BigNumberish,
      _quoteAmount: BigNumberish,
      _makerfeeCharged: BigNumberish,
      _takerfeeCharged: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addToken(
      _symbol: BytesLike,
      _token: string,
      auctionMode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addTrustedContract(
      _contract: string,
      _organization: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    adjustAvailable(
      _transaction: BigNumberish,
      _trader: string,
      _symbol: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositTokenFromContract(
      _from: string,
      _symbol: BytesLike,
      _quantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pauseDeposit(
      _paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeAdmin(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeAuctionAdmin(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAuctionMode(
      _symbol: BytesLike,
      _mode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateTransferFeeRate(
      _rate: BigNumberish,
      _rateType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addAdmin(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addAuctionAdmin(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addExecution(
    _maker: ITradePairs.OrderStruct,
    _taker: string,
    _baseSymbol: BytesLike,
    _quoteSymbol: BytesLike,
    _baseAmount: BigNumberish,
    _quoteAmount: BigNumberish,
    _makerfeeCharged: BigNumberish,
    _takerfeeCharged: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addToken(
    _symbol: BytesLike,
    _token: string,
    auctionMode: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addTrustedContract(
    _contract: string,
    _organization: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  adjustAvailable(
    _transaction: BigNumberish,
    _trader: string,
    _symbol: BytesLike,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositTokenFromContract(
    _from: string,
    _symbol: BytesLike,
    _quantity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pauseDeposit(
    _paused: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeAdmin(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeAuctionAdmin(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAuctionMode(
    _symbol: BytesLike,
    _mode: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateTransferFeeRate(
    _rate: BigNumberish,
    _rateType: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addAdmin(_address: string, overrides?: CallOverrides): Promise<void>;

    addAuctionAdmin(_address: string, overrides?: CallOverrides): Promise<void>;

    addExecution(
      _maker: ITradePairs.OrderStruct,
      _taker: string,
      _baseSymbol: BytesLike,
      _quoteSymbol: BytesLike,
      _baseAmount: BigNumberish,
      _quoteAmount: BigNumberish,
      _makerfeeCharged: BigNumberish,
      _takerfeeCharged: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addToken(
      _symbol: BytesLike,
      _token: string,
      auctionMode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addTrustedContract(
      _contract: string,
      _organization: string,
      overrides?: CallOverrides
    ): Promise<void>;

    adjustAvailable(
      _transaction: BigNumberish,
      _trader: string,
      _symbol: BytesLike,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositTokenFromContract(
      _from: string,
      _symbol: BytesLike,
      _quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    pause(overrides?: CallOverrides): Promise<void>;

    pauseDeposit(_paused: boolean, overrides?: CallOverrides): Promise<void>;

    removeAdmin(_address: string, overrides?: CallOverrides): Promise<void>;

    removeAuctionAdmin(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setAuctionMode(
      _symbol: BytesLike,
      _mode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updateTransferFeeRate(
      _rate: BigNumberish,
      _rateType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "PortfolioUpdated(uint8,address,bytes32,uint256,uint256,uint256,uint256)"(
      transaction?: BigNumberish | null,
      wallet?: string | null,
      symbol?: BytesLike | null,
      quantity?: null,
      feeCharged?: null,
      total?: null,
      available?: null
    ): PortfolioUpdatedEventFilter;
    PortfolioUpdated(
      transaction?: BigNumberish | null,
      wallet?: string | null,
      symbol?: BytesLike | null,
      quantity?: null,
      feeCharged?: null,
      total?: null,
      available?: null
    ): PortfolioUpdatedEventFilter;
  };

  estimateGas: {
    addAdmin(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addAuctionAdmin(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addExecution(
      _maker: ITradePairs.OrderStruct,
      _taker: string,
      _baseSymbol: BytesLike,
      _quoteSymbol: BytesLike,
      _baseAmount: BigNumberish,
      _quoteAmount: BigNumberish,
      _makerfeeCharged: BigNumberish,
      _takerfeeCharged: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addToken(
      _symbol: BytesLike,
      _token: string,
      auctionMode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addTrustedContract(
      _contract: string,
      _organization: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    adjustAvailable(
      _transaction: BigNumberish,
      _trader: string,
      _symbol: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositTokenFromContract(
      _from: string,
      _symbol: BytesLike,
      _quantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pauseDeposit(
      _paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeAdmin(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeAuctionAdmin(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAuctionMode(
      _symbol: BytesLike,
      _mode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateTransferFeeRate(
      _rate: BigNumberish,
      _rateType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addAdmin(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addAuctionAdmin(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addExecution(
      _maker: ITradePairs.OrderStruct,
      _taker: string,
      _baseSymbol: BytesLike,
      _quoteSymbol: BytesLike,
      _baseAmount: BigNumberish,
      _quoteAmount: BigNumberish,
      _makerfeeCharged: BigNumberish,
      _takerfeeCharged: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addToken(
      _symbol: BytesLike,
      _token: string,
      auctionMode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addTrustedContract(
      _contract: string,
      _organization: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    adjustAvailable(
      _transaction: BigNumberish,
      _trader: string,
      _symbol: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositTokenFromContract(
      _from: string,
      _symbol: BytesLike,
      _quantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pauseDeposit(
      _paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeAdmin(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeAuctionAdmin(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAuctionMode(
      _symbol: BytesLike,
      _mode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateTransferFeeRate(
      _rate: BigNumberish,
      _rateType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
